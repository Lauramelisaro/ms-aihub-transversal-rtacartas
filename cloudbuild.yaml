steps:
  # Generación de archivos ms-aihub-reportarsiniestro
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      echo "us-east1" > region.txt
      echo "repo-ms-transversal" > repo_artifact.txt
      echo "ms-aihub-transversal-rtacartas" > image_repo.txt
      echo "ms-aihub-transversal-rtacartas-dev" > service_name.txt
      echo "$(cat region.txt)-docker.pkg.dev/$PROJECT_ID/$(cat repo_artifact.txt)/$(cat image_repo.txt):latest" > image_name.txt
      echo "test-config-$(date +%Y%m%d-%H%M%S)" > config_name.txt
      echo "ms-aihub-transversal-rtacartas-api-dev" > api_name.txt
      echo "ms-aihub-transversal-rtacartas-dev" > api.txt


  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      if gcloud artifacts repositories describe "$(cat repo_artifact.txt)" --location="$(cat region.txt)" >/dev/null 2>&1; then
        echo "Repositorio ya existe, no se hace nada."
      else
        echo "Creando repositorio..."
        gcloud artifacts repositories create "$(cat repo_artifact.txt)" --location "$(cat region.txt)" --description "Repo de artefactos para los microservicios de AI" --repository-format="DOCKER"
      fi
  # Construcción de la imagen Docker y push a Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      docker build -t "$(cat image_name.txt)" .
      docker push "$(cat image_name.txt)"

  # Despliegue en Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud run deploy "$(cat service_name.txt)" \
        --image "$(cat image_name.txt)" \
        --region "$(cat region.txt)" \
        --platform managed \
        --service-account sb-xops-prod@appspot.gserviceaccount.com \
        --memory 750Mi \
        --concurrency 1 \
        --min-instances 1


  #Actualización de api_spec.yaml con la URL de Cloud Run desde el archivo
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   entrypoint: 'bash'
  #   args:
  #   - '-c'
  #   - |
  #     gcloud run services describe "$(cat service_name.txt)" --region="$(cat region.txt)" --platform=managed --format="value(status.url)" > url.txt
  #     cat url.txt | sed 's|$|/evento|' > url_with_path.txt
  #     sed -i "s|ENDPOINT_URL_PLACEHOLDER1|$(cat url_with_path.txt)|g" api_spec.yaml
  #     cat url.txt | sed 's|$|/cobertura|' > url_with_path.txt
  #     sed -i "s|ENDPOINT_URL_PLACEHOLDER2|$(cat url_with_path.txt)|g" api_spec.yaml
  #     cat api_spec.yaml

  #Creación de una nueva configuración de API utilizando el nombre almacenado en el archivo
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   entrypoint: 'bash'
  #   args:
  #   - '-c'
  #   - |
  #     gcloud api-gateway api-configs create "$(cat config_name.txt)" --api="$(cat api.txt)" --openapi-spec=api_spec.yaml --project=$PROJECT_ID
      

  #Creación o actualización del endpoint
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   entrypoint: 'bash'
  #   args:
  #   - '-c'
  #   - |
  #     if gcloud api-gateway gateways describe "$(cat api_name.txt)" --location="$(cat region.txt)" --project=$PROJECT_ID >/dev/null 2>&1; then
  #       echo "API Gateway already exists, updating..."
  #       gcloud api-gateway gateways update "$(cat api_name.txt)" --api "$(cat api.txt)" --api-config="$(cat config_name.txt)" --location="$(cat region.txt)" --project=$PROJECT_ID
  #     else
  #       echo "Creating API Gateway..."
  #       gcloud api-gateway gateways create "$(cat api_name.txt)" --api "$(cat api.txt)" --api-config="$(cat config_name.txt)" --location "$(cat region.txt)" --project=$PROJECT_ID
  #     fi

options:
  logging: CLOUD_LOGGING_ONLY